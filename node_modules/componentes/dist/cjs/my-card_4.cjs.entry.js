'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const index = require('./index-d74bd214.js');

const myCardCss = ":host{display:block}.my-card{width:200px;height:auto;background-color:rgb(80, 179, 146);padding:5px;border-radius:5px}.image{width:100%}.btn{background:rgb(41, 39, 39);color:white;text-decoration:none;display:flex;justify-content:center;align-items:center;border-radius:5px;min-height:60px}";

const MyCard = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.buttoncard = index.createEvent(this, "buttoncard", 7);
  }
  render() {
    return (index.h(index.Host, null, index.h("div", { class: "my-card" }, index.h("p", { class: "title" }, this.titlecard), index.h("img", { class: "image", src: this.avatar }), index.h("p", { class: "description" }, this.description), index.h("a", { href: "#", class: "btn", onClick: () => this.pressedButton() }, "Go somewhere"))));
  }
  pressedButton() {
    this.buttoncard.emit(true);
  }
};
MyCard.style = myCardCss;

function format(first, middle, last) {
  return (first || '') + (middle ? ` ${middle}` : '') + (last ? ` ${last}` : '');
}

const myComponentCss = ":host{display:block}img{width:50%}#padre div{position:absolute;right:0px;top:0px;width:50%;text-align:center;vertical-align:middle;background-color:red;color:white;height:50vh;animation:test 2s ease-in infinite}#padre{position:relative}@keyframes test{from{background:turquoise}to{background:violet;scale:30px}}.formTest input,.formTest button{padding:20px}";

const MyComponent = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.respuesta = index.createEvent(this, "respuesta", 7);
  }
  getText() {
    return format(this.first, this.middle, this.last);
  }
  generateMessage(e) {
    console.log(this.respuesta);
    setTimeout(() => {
      this.respuesta.emit('text');
    }, 500);
    e.preventDefault();
  }
  render() {
    return (index.h(index.Fragment, null, index.h("div", { id: "padre" }, index.h("img", { src: "https://picsum.photos/600/400" }), index.h("div", null, "Hello, World! I'm ", this.getText())), index.h("form", { class: "formTest" }, index.h("input", { type: "text", placeholder: "Prueba de inputs" }), index.h("button", { onClick: this.generateMessage }, "Enviar formulario"))));
  }
};
MyComponent.style = myComponentCss;

const myModalCss = "@font-face{font-family:Avenir-Book;src:url(\"./fonts/Avenir-Book.otf\") format(\"opentype\")}@font-face{font-family:Avenir-Heavy;src:url(\"./fonts/Avenir-Heavy.otf\") format(\"opentype\")}@font-face{font-family:Avenir-Black;src:url(\"./fonts/Avenir-Black.otf\") format(\"opentype\")}h1,h2,h3,h4,h5{margin:0;font-weight:100}:host{display:block}.modalContent{width:100vw;height:100vh;background-color:rgba(128, 128, 128, 0.5);position:absolute;text-align:center;top:0;left:0;display:flex;align-items:center;justify-content:center}.modal{width:200px;height:auto;background-color:tomato;width:300px}.off{display:none}";

const MyModal = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.open = index.createEvent(this, "open", 7);
    this.close = index.createEvent(this, "close", 7);
    this.titlem = '';
    this.isOpen = true;
  }
  openModal() {
    // Emitimos un evento de modal abierto
    this.showModal(true);
    this.open.emit(true);
  }
  closeModal() {
    if (!this.isOpen) {
      this.showModal(false);
      // Emitimos un evento de modal cerrado
      this.close.emit(true);
    }
  }
  // Escuchamos el evento del teclado keydown y más especificamente la tecla de "Escape"
  handleEscapeKey() {
    this.closeModal();
  }
  // Ciclo de vida, el componente se ha cargado pero aún no se ha renderizado.
  // Sólo se llamará una vez.
  // Es buen sitio para hacer actualizaciones de último momento antes de que se renderice.
  componentWillLoad() {
    this.showModal(this.isOpen);
  }
  showModal(show) {
    this.isOpen = !show;
    this.element.classList.toggle('off', this.isOpen);
  }
  render() {
    return (index.h("div", { class: "modalContent" }, index.h("div", { class: "modal" }, index.h("h1", null, this.titlem), index.h("slot", null), index.h("div", { class: "modal-footer" }, index.h("button", { type: "button", class: "btn-ok", onClick: () => this.closeModal() }, "Aceptar")))));
  }
  get element() { return index.getElement(this); }
};
MyModal.style = myModalCss;

const mySelectCss = "@font-face{font-family:Avenir-Book;src:url(\"./fonts/Avenir-Book.otf\") format(\"opentype\")}@font-face{font-family:Avenir-Heavy;src:url(\"./fonts/Avenir-Heavy.otf\") format(\"opentype\")}@font-face{font-family:Avenir-Black;src:url(\"./fonts/Avenir-Black.otf\") format(\"opentype\")}h1,h2,h3,h4,h5{margin:0;font-weight:100}.mySelect{font-family:Avenir-Book;font-size:16px;width:inherit}.mySelect .select{height:55px;display:flex;align-items:center;justify-content:center;width:100%;background-color:#f9f9f9;border-radius:27.5px;box-shadow:0 2px 4px 0 rgba(0, 0, 0, 0.06);z-index:1;position:relative;cursor:pointer}.mySelect .select span.placeholderImg{display:none}.mySelect .select img.placeholderText{display:none}.mySelect .select .placeholderImg{max-width:100%;max-height:80%;width:25%;padding-right:10%}.mySelect .select .placeholderText{color:#1f2b36;padding:0 20% 0 10%}.mySelect .select .arrow{position:absolute;right:10%}.mySelect .select:focus{outline:none}.mySelect .list,.mySelect .firstItem{display:none}.contentTitle,.backgroundMobile{display:none}.on .select{z-index:3;background-color:#ffffff}.on .select .arrow{transform:rotate(180deg)}.on .firstItem{display:block;z-index:2;color:#1f2b36}.on .firstItem .item{margin-top:-27.5px;padding-top:27.5px;background-color:#ffffff;font-weight:500;border-radius:none}.on .firstItem .item .separate{display:none}.on .contentList{position:relative}.on .contentList .list{display:flex;position:absolute;background-color:#f9f9f9;margin:0;color:#1f2b36;max-height:300px;overflow:-moz-scrollbars-vertical;overflow-y:auto;z-index:2;border-radius:0 0 20px 20px}.on .contentList .list ul{padding:0;margin:0;background-color:#eceff1;padding-bottom:20px}.on .contentList .list .contentItems{overflow-x:hidden;overflow-y:auto;max-height:100%;display:block;width:100%}.on .item,.on li{height:55px;display:flex;align-items:center;background-color:#eceff1;padding-left:13.5%;position:relative;cursor:pointer}.on .item .separate,.on li .separate{height:1px;width:92%;background-color:#cfdde2;position:absolute;bottom:0;margin-left:-10%}.on .item.selected,.on li.selected{background-color:#ffffff}.on .item.selected .separate,.on li.selected .separate{display:none}.on .item .contentImageList,.on li .contentImageList{width:12.5%;max-height:55px;display:flex;align-items:center;margin-right:6.7%;height:100%}.on .item .contentImageList .imagelist,.on li .contentImageList .imagelist{width:100%;max-height:80%}.on .item .noncontentImageList,.on li .noncontentImageList{display:none}@media (max-width: 768px){.on .select{z-index:1}.on .firstItem{width:100% !important;border-bottom:1px solid #cfdde2}.on .firstItem .item{margin:0;padding-top:0}.on .backgroundMobile{background-color:rgba(0, 0, 0, 0.5);width:100vw;height:100vh;position:fixed;top:0;left:0;display:block;z-index:2}.on .contentList{position:fixed;left:0;bottom:0;width:100vw;height:75vh;background-color:#eceff1;border-radius:20px 20px 0 0;z-index:3}.on .contentList .contentTitle{display:flex;height:74px;justify-content:center;align-items:center;font-family:Avenir-Heavy;background-color:#ffffff;border-radius:20px 20px 0 0;border-bottom:1px solid #cfdde2}.on .contentList .contentTitle .title{font-size:12px;text-transform:uppercase}.on .contentList .contentTitle .cancel{position:absolute;right:4%;font-family:Avenir-Book;font-size:14px;color:#cc0c1b}.on .contentList .list{width:100% !important;border-radius:0}.on .item,.on li{padding-left:13.5%}.on .item.selected,.on li.selected{margin:0;padding-left:13.5%}}";

const MySelect = class {
  constructor(hostRef) {
    index.registerInstance(this, hostRef);
    this.selected = index.createEvent(this, "selected", 7);
    this.toggle = false;
    this.currentItem = null;
    this.isOpen = false;
  }
  componentWillLoad() {
    if (this.placeholderimg) {
      this.extendlist = 2.38;
    }
    if (this.objectdata) {
      this.objectDataWatcher(this.objectdata);
    }
  }
  componentDidLoad() {
    this.sendExtend();
  }
  ;
  objectDataWatcher(newValue) {
    this._objectData = JSON.parse(newValue);
    this._firstItem = this._objectData[0];
    this._objectData.shift();
  }
  /**
   * this method open the list
   */
  async openDropdown() {
    if (this.isOpen) {
      this.closeDropdown();
    }
    else {
      this.isOpen = true;
      this.element.classList.toggle('on', this.isOpen);
      if (!this.elementSelected || this.elementSelected.id == "0") {
        this.currentItem = null;
      }
      if (window.innerWidth <= 768 && this.animationopen) {
        var element = this.element.querySelector('.contentList');
        element.classList.add('animate__animated', this.animationopen);
        element.addEventListener('animationend', () => {
          element.className = element.className.replace(/\banimate__.*?\b/g, '');
        });
      }
    }
  }
  /**
   * this method close the list
   */
  async closeDropdown() {
    this.isOpen = false;
    if (window.innerWidth <= 768 && this.animationclose) {
      var element = this.element.querySelector('.contentList');
      element.classList.add('animate__animated', this.animationclose);
      element.addEventListener('animationend', () => {
        element.className = element.className.replace(/\banimate__.*?\b/g, '');
        this.element.classList.toggle('on', this.isOpen);
      });
    }
    else {
      this.element.classList.toggle('on', this.isOpen);
    }
  }
  /**
   * this method save the selection
   */
  async selection(selected, index) {
    this.placeholder = this.placeholderimg ? selected.logo : selected.name;
    this.currentItem = parseInt(index);
    this.elementSelected = selected;
    this.selected.emit(selected);
    this.closeDropdown();
  }
  /**
   * this method send the size of the list respect with the select
   */
  async sendExtend() {
    var firstItem = this.element.querySelector(".firstItem");
    var list = this.element.querySelector(".list");
    list.style.width = "" + (this.extendlist ? this.extendlist * 100 : 1 * 100) + "%";
    firstItem.style.width = "" + (this.extendlist ? this.extendlist * 100 : 1 * 100) + "%";
  }
  onMouseUp(ev) {
    const clickedInside = this.element.contains(ev.target);
    if (this.isOpen && !clickedInside) {
      this.closeDropdown();
    }
  }
  /** Recived keyboard down from element */
  onKey(e) {
    let item;
    console.log(e.code);
    if (!this.isOpen) {
      return;
    }
    switch (e.code) {
      case 'ArrowUp':
        e.preventDefault();
        if (this.currentItem <= 0) {
          return;
        }
        this.currentItem--;
        break;
      case 'ArrowDown':
        e.preventDefault();
        if (this.currentItem != null && this._objectData[this.currentItem + 1]) {
          this.currentItem++;
        }
        else {
          this.currentItem = 0;
        }
        break;
      case 'Tab':
        e.preventDefault();
        item = this._objectData[this.currentItem];
        if (item) {
          this.selection(item, this.currentItem);
        }
        break;
      case 'Enter':
        e.preventDefault();
        item = this._objectData[this.currentItem];
        if (item) {
          this.selection(item, this.currentItem);
        }
        break;
    }
  }
  render() {
    const items = [];
    if (this._objectData) {
      for (let i in this._objectData) {
        const item = this._objectData[i];
        const isSelected = parseInt(i) === this.currentItem;
        const props = {
          class: { 'selected': isSelected },
        };
        const li = index.h("li", Object.assign({}, props, { onClick: () => this.selection(item, i) }), index.h("div", { class: item.logo ? "contentImageList" : "noncontentImageList" }, index.h("img", { class: "imagelist", src: item.logo ? item.logo : "" })), index.h("div", null, item.name), index.h("div", { class: "separate" }));
        items.push(li);
      }
    }
    return (index.h(index.Host, null, index.h("link", { rel: "stylesheet", href: "https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" }), index.h("div", { class: "mySelect" }, index.h("div", { class: "select", onClick: () => this.openDropdown() }, index.h("span", { class: this.placeholderimg ? "placeholderImg" : "placeholderText" }, this.placeholder), index.h("img", { class: this.placeholderimg ? "placeholderImg" : "placeholderText", src: this.placeholderimg ? this.placeholder : "" }), index.h("svg", { class: "arrow", width: "16px", height: "9px" }, index.h("g", { id: "Page-1", stroke: "none", "stroke-width": "1", fill: "none", "fill-rule": "evenodd" }, index.h("g", { id: "CY_home_marca", transform: "translate(-649.000000, -652.000000)", fill: "#546E7A" }, index.h("g", { id: "Hero-Copy", transform: "translate(0.000000, 134.000000)" }, index.h("g", { id: "Points-Slider", transform: "translate(250.000000, 226.000000)" }, index.h("g", { id: "Search", transform: "translate(80.000000, 267.000000)" }, index.h("path", { d: "M331.033084,23.7007927 L325.453084,29.2907927 L331.033084,34.8807927 C331.420808,35.2708302 331.420808,35.9007552 331.033084,36.2907927 C330.643047,36.6785163 330.013122,36.6785163 329.623084,36.2907927 L323.263084,29.9307927 C322.912305,29.5762232 322.912305,29.0053622 323.263084,28.6507927 L329.623084,22.2907927 C330.013122,21.9030691 330.643047,21.9030691 331.033084,22.2907927 C331.420808,22.6808302 331.420808,23.3107552 331.033084,23.7007927 Z", id: "Path", transform: "translate(327.161938, 29.290793) rotate(-90.000000) translate(-327.161938, -29.290793) " })))))))), index.h("div", { class: "backgroundMobile", onClick: () => this.closeDropdown() }), index.h("div", { class: "contentList" }, index.h("div", { class: "contentTitle" }, index.h("div", { class: "title" }, this.titleselect), index.h("div", { class: "cancel", onClick: () => this.closeDropdown() }, this.cancelname)), index.h("div", { class: "firstItem" }, index.h("div", { class: "item", onClick: () => this.selection(this._firstItem, 0) }, index.h("div", { class: this._firstItem ? this._firstItem.logo :  "noncontentImageList" }, index.h("img", { class: "imagelist", src: this._firstItem ? this._firstItem.logo :  "" })), index.h("div", null, this._firstItem ? this._firstItem.name : ""), index.h("div", { class: "separate" }))), index.h("div", { class: "list" }, index.h("div", { class: "contentItems" }, index.h("ul", null, items)))))));
  }
  static get assetsDirs() { return ["assets"]; }
  get element() { return index.getElement(this); }
  static get watchers() { return {
    "objectdata": ["objectDataWatcher"]
  }; }
};
MySelect.style = mySelectCss;

exports.my_card = MyCard;
exports.my_component = MyComponent;
exports.my_modal = MyModal;
exports.my_select = MySelect;
