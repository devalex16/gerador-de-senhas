import { Component, Element, Event, h, Host, Listen, Method, Prop, State, Watch } from '@stencil/core';
export class MySelect {
  constructor() {
    this.toggle = false;
    this.currentItem = null;
    this.isOpen = false;
  }
  componentWillLoad() {
    if (this.placeholderimg) {
      this.extendlist = 2.38;
    }
    if (this.objectdata) {
      this.objectDataWatcher(this.objectdata);
    }
  }
  componentDidLoad() {
    this.sendExtend();
  }
  ;
  objectDataWatcher(newValue) {
    this._objectData = JSON.parse(newValue);
    this._firstItem = this._objectData[0];
    this._objectData.shift();
  }
  /**
   * this method open the list
   */
  async openDropdown() {
    if (this.isOpen) {
      this.closeDropdown();
    }
    else {
      this.isOpen = true;
      this.element.classList.toggle('on', this.isOpen);
      if (!this.elementSelected || this.elementSelected.id == "0") {
        this.currentItem = null;
      }
      if (window.innerWidth <= 768 && this.animationopen) {
        var element = this.element.querySelector('.contentList');
        element.classList.add('animate__animated', this.animationopen);
        element.addEventListener('animationend', () => {
          element.className = element.className.replace(/\banimate__.*?\b/g, '');
        });
      }
    }
  }
  /**
   * this method close the list
   */
  async closeDropdown() {
    this.isOpen = false;
    if (window.innerWidth <= 768 && this.animationclose) {
      var element = this.element.querySelector('.contentList');
      element.classList.add('animate__animated', this.animationclose);
      element.addEventListener('animationend', () => {
        element.className = element.className.replace(/\banimate__.*?\b/g, '');
        this.element.classList.toggle('on', this.isOpen);
      });
    }
    else {
      this.element.classList.toggle('on', this.isOpen);
    }
  }
  /**
   * this method save the selection
   */
  async selection(selected, index) {
    this.placeholder = this.placeholderimg ? selected.logo : selected.name;
    this.currentItem = parseInt(index);
    this.elementSelected = selected;
    this.selected.emit(selected);
    this.closeDropdown();
  }
  /**
   * this method send the size of the list respect with the select
   */
  async sendExtend() {
    var firstItem = this.element.querySelector(".firstItem");
    var list = this.element.querySelector(".list");
    list.style.width = "" + (this.extendlist ? this.extendlist * 100 : 1 * 100) + "%";
    firstItem.style.width = "" + (this.extendlist ? this.extendlist * 100 : 1 * 100) + "%";
  }
  onMouseUp(ev) {
    const clickedInside = this.element.contains(ev.target);
    if (this.isOpen && !clickedInside) {
      this.closeDropdown();
    }
  }
  /** Recived keyboard down from element */
  onKey(e) {
    let item;
    console.log(e.code);
    if (!this.isOpen) {
      return;
    }
    switch (e.code) {
      case 'ArrowUp':
        e.preventDefault();
        if (this.currentItem <= 0) {
          return;
        }
        this.currentItem--;
        break;
      case 'ArrowDown':
        e.preventDefault();
        if (this.currentItem != null && this._objectData[this.currentItem + 1]) {
          this.currentItem++;
        }
        else {
          this.currentItem = 0;
        }
        break;
      case 'Tab':
        e.preventDefault();
        item = this._objectData[this.currentItem];
        if (item) {
          this.selection(item, this.currentItem);
        }
        break;
      case 'Enter':
        e.preventDefault();
        item = this._objectData[this.currentItem];
        if (item) {
          this.selection(item, this.currentItem);
        }
        break;
    }
  }
  render() {
    const items = [];
    if (this._objectData) {
      for (let i in this._objectData) {
        const item = this._objectData[i];
        const isSelected = parseInt(i) === this.currentItem;
        const props = {
          class: { 'selected': isSelected },
        };
        const li = h("li", Object.assign({}, props, { onClick: () => this.selection(item, i) }),
          h("div", { class: item.logo ? "contentImageList" : "noncontentImageList" },
            h("img", { class: "imagelist", src: item.logo ? item.logo : "" })),
          h("div", null, item.name),
          h("div", { class: "separate" }));
        items.push(li);
      }
    }
    return (h(Host, null,
      h("link", { rel: "stylesheet", href: "https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css" }),
      h("div", { class: "mySelect" },
        h("div", { class: "select", onClick: () => this.openDropdown() },
          h("span", { class: this.placeholderimg ? "placeholderImg" : "placeholderText" }, this.placeholder),
          h("img", { class: this.placeholderimg ? "placeholderImg" : "placeholderText", src: this.placeholderimg ? this.placeholder : "" }),
          h("svg", { class: "arrow", width: "16px", height: "9px" },
            h("g", { id: "Page-1", stroke: "none", "stroke-width": "1", fill: "none", "fill-rule": "evenodd" },
              h("g", { id: "CY_home_marca", transform: "translate(-649.000000, -652.000000)", fill: "#546E7A" },
                h("g", { id: "Hero-Copy", transform: "translate(0.000000, 134.000000)" },
                  h("g", { id: "Points-Slider", transform: "translate(250.000000, 226.000000)" },
                    h("g", { id: "Search", transform: "translate(80.000000, 267.000000)" },
                      h("path", { d: "M331.033084,23.7007927 L325.453084,29.2907927 L331.033084,34.8807927 C331.420808,35.2708302 331.420808,35.9007552 331.033084,36.2907927 C330.643047,36.6785163 330.013122,36.6785163 329.623084,36.2907927 L323.263084,29.9307927 C322.912305,29.5762232 322.912305,29.0053622 323.263084,28.6507927 L329.623084,22.2907927 C330.013122,21.9030691 330.643047,21.9030691 331.033084,22.2907927 C331.420808,22.6808302 331.420808,23.3107552 331.033084,23.7007927 Z", id: "Path", transform: "translate(327.161938, 29.290793) rotate(-90.000000) translate(-327.161938, -29.290793) " })))))))),
        h("div", { class: "backgroundMobile", onClick: () => this.closeDropdown() }),
        h("div", { class: "contentList" },
          h("div", { class: "contentTitle" },
            h("div", { class: "title" }, this.titleselect),
            h("div", { class: "cancel", onClick: () => this.closeDropdown() }, this.cancelname)),
          h("div", { class: "firstItem" },
            h("div", { class: "item", onClick: () => this.selection(this._firstItem, 0) },
              h("div", { class: this._firstItem ? this._firstItem.logo : "" ? "contentImageList" : "noncontentImageList" },
                h("img", { class: "imagelist", src: this._firstItem ? this._firstItem.logo : "" ? this._firstItem.logo : "" })),
              h("div", null, this._firstItem ? this._firstItem.name : ""),
              h("div", { class: "separate" }))),
          h("div", { class: "list" },
            h("div", { class: "contentItems" },
              h("ul", null, items)))))));
  }
  static get is() { return "my-select"; }
  static get originalStyleUrls() { return {
    "$": ["my-select.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["my-select.css"]
  }; }
  static get assetsDirs() { return ["assets"]; }
  static get properties() { return {
    "titleselect": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the title of select this only show in mobile view"
      },
      "attribute": "titleselect",
      "reflect": false
    },
    "cancelname": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the name of the button close this only show in mobile view"
      },
      "attribute": "cancelname",
      "reflect": false
    },
    "placeholder": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the initial text of the placeholder"
      },
      "attribute": "placeholder",
      "reflect": false
    },
    "placeholderimg": {
      "type": "boolean",
      "mutable": false,
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define if the placeHolder is a image"
      },
      "attribute": "placeholderimg",
      "reflect": false
    },
    "extendlist": {
      "type": "number",
      "mutable": false,
      "complexType": {
        "original": "number",
        "resolved": "number",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define how extension the list has, if this is 2 the size is the double of the selector"
      },
      "attribute": "extendlist",
      "reflect": false
    },
    "animationopen": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the animation to apply when is opening, based on animate.style"
      },
      "attribute": "animationopen",
      "reflect": false
    },
    "animationclose": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the animation to apply when is closing, based on animate.style"
      },
      "attribute": "animationclose",
      "reflect": false
    },
    "objectdata": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "Select | string",
        "resolved": "Select | string",
        "references": {
          "Select": {
            "location": "import",
            "path": "./selectItems"
          }
        }
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": "Define the list parameters id, name, logo, count. the first element must be id=0 and is fixed"
      },
      "attribute": "objectdata",
      "reflect": false
    }
  }; }
  static get states() { return {
    "toggle": {},
    "currentItem": {}
  }; }
  static get events() { return [{
      "method": "selected",
      "name": "selected",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "openDropdown": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "this method open the list",
        "tags": []
      }
    },
    "closeDropdown": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "this method close the list",
        "tags": []
      }
    },
    "selection": {
      "complexType": {
        "signature": "(selected: any, index: any) => Promise<void>",
        "parameters": [{
            "tags": [],
            "text": ""
          }, {
            "tags": [],
            "text": ""
          }],
        "references": {
          "Promise": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "this method save the selection",
        "tags": []
      }
    },
    "sendExtend": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {
          "Promise": {
            "location": "global"
          },
          "HTMLElement": {
            "location": "global"
          }
        },
        "return": "Promise<void>"
      },
      "docs": {
        "text": "this method send the size of the list respect with the select",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "element"; }
  static get watchers() { return [{
      "propName": "objectdata",
      "methodName": "objectDataWatcher"
    }]; }
  static get listeners() { return [{
      "name": "mousedown",
      "method": "onMouseUp",
      "target": "document",
      "capture": false,
      "passive": true
    }, {
      "name": "keydown",
      "method": "onKey",
      "target": "document",
      "capture": false,
      "passive": false
    }]; }
}
