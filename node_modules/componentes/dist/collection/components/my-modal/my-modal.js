import { Component, h, Prop, Element, Method, Event, Listen, State } from '@stencil/core';
export class MyModal {
  constructor() {
    this.titlem = '';
    this.isOpen = true;
  }
  openModal() {
    // Emitimos un evento de modal abierto
    this.showModal(true);
    this.open.emit(true);
  }
  closeModal() {
    if (!this.isOpen) {
      this.showModal(false);
      // Emitimos un evento de modal cerrado
      this.close.emit(true);
    }
  }
  // Escuchamos el evento del teclado keydown y más especificamente la tecla de "Escape"
  handleEscapeKey() {
    this.closeModal();
  }
  // Ciclo de vida, el componente se ha cargado pero aún no se ha renderizado.
  // Sólo se llamará una vez.
  // Es buen sitio para hacer actualizaciones de último momento antes de que se renderice.
  componentWillLoad() {
    this.showModal(this.isOpen);
  }
  showModal(show) {
    this.isOpen = !show;
    this.element.classList.toggle('off', this.isOpen);
  }
  render() {
    return (h("div", { class: "modalContent" },
      h("div", { class: "modal" },
        h("h1", null, this.titlem),
        h("slot", null),
        h("div", { class: "modal-footer" },
          h("button", { type: "button", class: "btn-ok", onClick: () => this.closeModal() }, "Aceptar")))));
  }
  static get is() { return "my-modal"; }
  static get originalStyleUrls() { return {
    "$": ["my-modal.scss"]
  }; }
  static get styleUrls() { return {
    "$": ["my-modal.css"]
  }; }
  static get properties() { return {
    "titlem": {
      "type": "string",
      "mutable": false,
      "complexType": {
        "original": "string",
        "resolved": "string",
        "references": {}
      },
      "required": false,
      "optional": false,
      "docs": {
        "tags": [],
        "text": ""
      },
      "attribute": "titlem",
      "reflect": false,
      "defaultValue": "''"
    }
  }; }
  static get states() { return {
    "isOpen": {}
  }; }
  static get events() { return [{
      "method": "open",
      "name": "open",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }, {
      "method": "close",
      "name": "close",
      "bubbles": true,
      "cancelable": true,
      "composed": true,
      "docs": {
        "tags": [],
        "text": ""
      },
      "complexType": {
        "original": "boolean",
        "resolved": "boolean",
        "references": {}
      }
    }]; }
  static get methods() { return {
    "openModal": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {},
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    },
    "closeModal": {
      "complexType": {
        "signature": "() => Promise<void>",
        "parameters": [],
        "references": {},
        "return": "Promise<void>"
      },
      "docs": {
        "text": "",
        "tags": []
      }
    }
  }; }
  static get elementRef() { return "element"; }
  static get listeners() { return [{
      "name": "window:keydown.escape",
      "method": "handleEscapeKey",
      "target": undefined,
      "capture": false,
      "passive": false
    }]; }
}
