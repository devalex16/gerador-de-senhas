/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "./stencil-public-runtime";
import { Select } from "./components/my-select/selectItems";
export namespace Components {
    interface MyCard {
        "avatar": string;
        "description": string;
        "titlecard": string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface MyModal {
        "closeModal": () => Promise<void>;
        "openModal": () => Promise<void>;
        "titlem": string;
    }
    interface MySelect {
        /**
          * Define the animation to apply when is closing, based on animate.style
         */
        "animationclose": string;
        /**
          * Define the animation to apply when is opening, based on animate.style
         */
        "animationopen": string;
        /**
          * Define the name of the button close this only show in mobile view
         */
        "cancelname": string;
        /**
          * this method close the list
         */
        "closeDropdown": () => Promise<void>;
        /**
          * Define how extension the list has, if this is 2 the size is the double of the selector
         */
        "extendlist": number;
        /**
          * Define the list parameters id, name, logo, count. the first element must be id=0 and is fixed
         */
        "objectdata": Select | string;
        /**
          * this method open the list
         */
        "openDropdown": () => Promise<void>;
        /**
          * Define the initial text of the placeholder
         */
        "placeholder": string;
        /**
          * Define if the placeHolder is a image
         */
        "placeholderimg": boolean;
        /**
          * this method save the selection
         */
        "selection": (selected: any, index: any) => Promise<void>;
        /**
          * this method send the size of the list respect with the select
         */
        "sendExtend": () => Promise<void>;
        /**
          * Define the title of select this only show in mobile view
         */
        "titleselect": string;
    }
}
declare global {
    interface HTMLMyCardElement extends Components.MyCard, HTMLStencilElement {
    }
    var HTMLMyCardElement: {
        prototype: HTMLMyCardElement;
        new (): HTMLMyCardElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLMyModalElement extends Components.MyModal, HTMLStencilElement {
    }
    var HTMLMyModalElement: {
        prototype: HTMLMyModalElement;
        new (): HTMLMyModalElement;
    };
    interface HTMLMySelectElement extends Components.MySelect, HTMLStencilElement {
    }
    var HTMLMySelectElement: {
        prototype: HTMLMySelectElement;
        new (): HTMLMySelectElement;
    };
    interface HTMLElementTagNameMap {
        "my-card": HTMLMyCardElement;
        "my-component": HTMLMyComponentElement;
        "my-modal": HTMLMyModalElement;
        "my-select": HTMLMySelectElement;
    }
}
declare namespace LocalJSX {
    interface MyCard {
        "avatar"?: string;
        "description"?: string;
        "onButtoncard"?: (event: CustomEvent<boolean>) => void;
        "titlecard"?: string;
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
        "onRespuesta"?: (event: CustomEvent<string>) => void;
    }
    interface MyModal {
        "onClose"?: (event: CustomEvent<boolean>) => void;
        "onOpen"?: (event: CustomEvent<boolean>) => void;
        "titlem"?: string;
    }
    interface MySelect {
        /**
          * Define the animation to apply when is closing, based on animate.style
         */
        "animationclose"?: string;
        /**
          * Define the animation to apply when is opening, based on animate.style
         */
        "animationopen"?: string;
        /**
          * Define the name of the button close this only show in mobile view
         */
        "cancelname"?: string;
        /**
          * Define how extension the list has, if this is 2 the size is the double of the selector
         */
        "extendlist"?: number;
        /**
          * Define the list parameters id, name, logo, count. the first element must be id=0 and is fixed
         */
        "objectdata"?: Select | string;
        "onSelected"?: (event: CustomEvent<boolean>) => void;
        /**
          * Define the initial text of the placeholder
         */
        "placeholder"?: string;
        /**
          * Define if the placeHolder is a image
         */
        "placeholderimg"?: boolean;
        /**
          * Define the title of select this only show in mobile view
         */
        "titleselect"?: string;
    }
    interface IntrinsicElements {
        "my-card": MyCard;
        "my-component": MyComponent;
        "my-modal": MyModal;
        "my-select": MySelect;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-card": LocalJSX.MyCard & JSXBase.HTMLAttributes<HTMLMyCardElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "my-modal": LocalJSX.MyModal & JSXBase.HTMLAttributes<HTMLMyModalElement>;
            "my-select": LocalJSX.MySelect & JSXBase.HTMLAttributes<HTMLMySelectElement>;
        }
    }
}
